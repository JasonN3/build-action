name: BlueOS Build Action
description: Builds container images for BlueOS
author: JasonN3
inputs:
  image_name:
    description: name of the image to build
    required: true
  image_variant:
    description: name of the image variant
    required: false
    default: ''
  version:
    description: primary tag to assign to the image
    required: true
  

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Free disk space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

      - name: Generate image name
        run: |
          if [[ "${{ inputs.image_variant }}" == "main" ]]; then
              echo "IMAGE_NAME=${{ inputs.image_name }}" >> $GITHUB_ENV
          else
              echo "IMAGE_NAME=${{ format('{0}-{1}', inputs.image_name, inputs.image_variant) }}" >> $GITHUB_ENV
          fi

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Run on main
          if [[ ${{ github.event_name != 'pull_request' && github.base_ref == github.event.repository.default_branch }} ]]
          then
            BUILD_TAG="${{ inputs.version }}"
            COMMIT_TAGS=()
            COMMIT_TAGS+=("${{ inputs.version }}")
            if [[ -n "${{ inputs.support }}" ]]
            then
              COMMIT_TAGS+=("${{ inputs.support }}")
            fi
            # VERSION-YYYYMMDD
            TIMESTAMP="$(date +%Y%m%d)"
            COMMIT_TAGS+=("${BUILD_TAG}-${TIMESTAMP}")
          fi

          # Pull Request
          if [[ ${{ github.event_name }} == "pull_request" ]]
          then
            # VERSION-pr-#
            BUILD_TAG="${{ inputs.version }}-pr-${{ github.event.number }}"
            COMMIT_TAGS=()
            # VERSION-pr-#-SHA
            SHA_SHORT="${GITHUB_SHA::7}"
            COMMIT_TAGS+=("$BUILD_TAG-${SHA_SHORT}")
            # VERSION-pr-#-YYYYMMDD
            TIMESTAMP="$(date +%Y%m%d)"
            COMMIT_TAGS+=("${BUILD_TAG}-${TIMESTAMP}")
          fi

          # Other
          if [[ -z ${BUILD_TAG} ]]
          then
            SHA_SHORT="${GITHUB_SHA::7}"
            BUILD_TAG="${SHA_SHORT}"
          fi

          echo "tags=${BUILD_TAG} ${COMMIT_TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Get Current Fedora Version
        id: labels
        shell: bash
        run: |
          set -eo pipefail
          ver=$(skopeo inspect docker://ghcr.io/ublue-os/silverblue-${{ matrix.image_flavor }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          if [ -z "$ver" ] || [ "null" = "$ver" ]; then
            echo "inspected image version must not be empty or null"
            exit 1
          fi
          echo "VERSION=$ver" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.labels.outputs.VERSION }}
            org.opencontainers.image.description=An interpretation of the Ubuntu spirit built on Fedora technology 
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/bluefin/bluefin/README.md
            io.artifacthub.package.logo-url=https://avatars.githubusercontent.com/u/120078124?s=200&v=4

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_FLAVOR=${{ matrix.image_flavor }}
            IMAGE_VENDOR=${{ github.repository_owner }}
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
            TARGET_BASE=${{ matrix.target_base }}
            AKMODS_FLAVOR=${{ env.AKMODS_FLAVOR }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false
          # TODO(GH-280)
          # extra-args: |
          #   --target=${{ matrix.target_name || matrix.base_name }}
          extra-args: |
            --target=${{ matrix.base_name }}

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sign container
      - uses: sigstore/cosign-installer@v3.4.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"  

  check:
    name: Check all builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [push-ghcr]
    steps:
      - name: Exit on failure
        if: ${{ needs.push-ghcr.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0

  build-iso:
    needs:
      - check
    strategy:
      fail-fast: false
      matrix:
        image_flavor: ["", nvidia, asus, asus-nvidia]
        base_name: [bluefin, bluefin-dx]
        major_version: [38, 39]
    permissions:
      contents: read
      packages: write
    uses: ublue-os/isogenerator/.github/workflows/iso.yml@1.0.0
    with:
      IMAGE_VERSION: ${{ matrix.major_version }}
      IMAGE_ARCH: x86_64
      IMAGE_NAME: ${{ matrix.base_name }}-${{ matrix.image_flavor }}
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}
      VARIANT: 'Silverblue'
      BUILD_REPO: ublue-os/isogenerator
      BUILD_REF: 1.0.0